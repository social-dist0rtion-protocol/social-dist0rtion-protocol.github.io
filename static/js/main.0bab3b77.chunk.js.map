{"version":3,"sources":["About.js","util.js","Redeem.js","NotFound.js","Visualize.js","AppRouter.js","serviceWorker.js","index.js"],"names":["About","react_default","a","createElement","CONTRACTS","HuntZuckerberg","require","resolveWeb3","resolve","localProvider","authentication","web3","window","ethereum","Web3","enable","then","err","console","log","currentProvider","Error","concat","_getWeb3","undefined","Promise","addEventListener","document","readyState","getWeb3Anon","getContract","_x2","_x3","_getContract","apply","this","arguments","_callee2","name","metadata","networkId","contractAbi","contractAddress","contract","regenerator_default","wrap","_context2","prev","next","eth","net","getId","sent","abi","networks","address","Contract","abrupt","stop","IMAGE_CONFIG","Redeem","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","getWeb3","getAccounts","account","methods","redeem","match","params","token","send","from","hashedCodeToPlayer","Web3Utils","keccak256","tokenToPlayer","setState","isTokenRedeemed","hexToken","image","className","src","alt","disabled","onClick","handleRedeem","bind","href","target","rel","Link","to","Component","withRouter","NotFound","Visualize","activatedCodes","owners","getActivatedHashedCodes","code","i","padding","padLeft","toHex","map","_ref3","asyncToGenerator","mark","_callee","_context","_this2","_x","_this$state","style","position","margin","width","height","_IMAGE_CONFIG$code","left","top","key","Index","AppRouter","HashRouter","Switch","Route","path","exact","component","Boolean","location","hostname","ReactDOM","render","src_AppRouter","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0bab3b77.chunk.js","sourcesContent":["import React from \"react\";\n\nconst About = () => (\n  <div>\n    <h2>About</h2>\n    <p>\n      {\" \"}\n      Mark Zuckerberg is trying to centralize the ethereum Network and we need\n      to stop it!\n    </p>\n    <p>A super funny game developed by Social Dist0rtion Protocol</p>\n  </div>\n);\n\nexport default About;\n","import Web3 from \"web3\";\nimport Web3Utils from \"web3-utils\";\n\nconst CONTRACTS = {\n  HuntZuckerberg: require(\"./resources/contracts/HuntZuckerberg.json\")\n};\n\nfunction resolveWeb3(resolve, localProvider, authentication) {\n  let web3;\n\n  if (window.ethereum) {\n    web3 = new Web3(window.ethereum);\n    if (authentication === true) {\n      try {\n        window.ethereum.enable().then(() => resolve(web3));\n      } catch (err) {\n        console.log(err);\n      }\n    } else {\n      resolve(web3);\n    }\n  } else if (window.web3) {\n    web3 = new Web3(window.web3.currentProvider);\n    resolve(web3);\n  } else {\n    if (authentication === true) {\n      throw new Error(\n        \"Non-Ethereum browser detected. Cannot work in authenticated mode\"\n      );\n    }\n    web3 = new Web3(localProvider);\n    console.log(`Non-Ethereum browser detected. Using ${localProvider}.`);\n    resolve(web3);\n  }\n}\n\nfunction _getWeb3(localProvider, authentication) {\n  if (localProvider === undefined) {\n    localProvider =\n      process.env.NODE_ENV === \"development\"\n        ? \"http://localhost:8545\"\n        : \"https://rinkeby.infura.io/\";\n  }\n\n  return new Promise(resolve => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", () => {\n      resolveWeb3(resolve, localProvider, authentication);\n    });\n    // If document has loaded already, try to get Web3 immediately.\n    if (document.readyState === \"complete\") {\n      resolveWeb3(resolve, localProvider, authentication);\n    }\n  });\n}\n\nexport function getWeb3(localProvider) {\n  return _getWeb3(localProvider, true);\n}\n\nexport function getWeb3Anon(localProvider) {\n  return _getWeb3(localProvider, false);\n}\n\nexport function isWallet() {\n  return !!(window.web3 || window.ethereum);\n}\n\nexport function toHexAndPad(i, padding) {\n  if (padding === undefined) {\n    padding = 64;\n  }\n  return Web3Utils.padLeft(Web3Utils.toHex(i), padding);\n}\n\nexport async function isConnected(web3) {\n  const networkId = await web3.eth.net.getId();\n  return networkId === 4;\n}\n\nexport async function getContract(web3, name) {\n  const metadata = CONTRACTS[name];\n  const networkId = await web3.eth.net.getId();\n  const contractAbi = metadata.abi;\n  const contractAddress = metadata.networks[networkId].address;\n  const contract = new web3.eth.Contract(contractAbi, contractAddress);\n  return contract;\n}\n","import React, { Component } from \"react\";\nimport { withRouter, Link } from \"react-router-dom\";\nimport Web3Utils from \"web3-utils\";\nimport { getWeb3, getWeb3Anon, getContract, isWallet } from \"./util\";\n\nconst IMAGE_CONFIG = require(\"./resources/image_config\");\n\nclass Redeem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  async handleRedeem() {\n    const web3 = await getWeb3();\n    const account = (await web3.eth.getAccounts())[0];\n    const contract = await getContract(web3, \"HuntZuckerberg\");\n    contract.methods\n      .redeem(this.props.match.params.token)\n      .send({ from: account });\n  }\n\n  async componentDidMount() {\n    const web3 = await getWeb3Anon();\n    const contract = await getContract(web3, \"HuntZuckerberg\");\n    const tokenToPlayer = await contract.methods\n      .hashedCodeToPlayer(Web3Utils.keccak256(this.props.match.params.token))\n      .call();\n    this.setState({\n      isTokenRedeemed:\n        tokenToPlayer !== \"0x0000000000000000000000000000000000000001\"\n    });\n  }\n\n  render() {\n    const token = this.props.match.params.token;\n    const hexToken = Web3Utils.keccak256(token);\n    if (!IMAGE_CONFIG[hexToken]) {\n      return <h1>Invalid Token</h1>;\n    }\n    const { isTokenRedeemed } = this.state;\n    const { image } = IMAGE_CONFIG[hexToken];\n\n    return (\n      <div className=\"Redeem\">\n        <h1>You've found a piece of Mark Zuckerberg!</h1>\n\n        <p>\n          Mark Zuckerberg has been decentralized and spread around the 35c3.\n          Redeem this token and help us rebuilding The Mark™.\n        </p>\n        <div className=\"token\">\n          <h2>{token}</h2>\n          <img src={`./images/puzzle/${image}`} alt=\"\" />\n          <button\n            disabled={isTokenRedeemed}\n            onClick={this.handleRedeem.bind(this)}\n          >\n            Redeem\n          </button>\n        </div>\n\n        {!isWallet() && (\n          <div className=\"alert warning\">\n            <p>\n              You are not using an Ethereum compatible browser. In order to\n              redeem the token, you need to install{\" \"}\n              <a\n                href=\"https://metamask.io/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                MetaMask\n              </a>{\" \"}\n              on your browser.\n            </p>\n          </div>\n        )}\n        <h2>What is this?</h2>\n        <p>This game works on the Ethereum Rinkeby blockchain.</p>\n        <p>\n          Read how it works in the <Link to=\"/about\">about page</Link>, and make\n          sure to visit us at the assembly table.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Redeem);\n","import React from \"react\";\n\nconst NotFound = () => (\n  <div>\n    <h2>Not Found</h2>\n    <p>Nothing can be found at this URL. Go somewhere else.</p>\n  </div>\n);\n\nexport default NotFound;\n","import React, { Component } from \"react\";\nimport { getWeb3Anon, getContract, toHexAndPad } from \"./util\";\nconst IMAGE_CONFIG = require(\"./resources/image_config\");\n\nclass Visualize extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { activatedCodes: [], owners: {} };\n  }\n\n  async componentDidMount() {\n    const web3 = await getWeb3Anon();\n    const [account = \"none\"] = await web3.eth.getAccounts();\n    const contract = await getContract(web3, \"HuntZuckerberg\");\n    const activatedCodes = (\n      (await contract.methods.getActivatedHashedCodes().call()) || []\n    ).map(code => toHexAndPad(code));\n    this.setState({\n      activatedCodes: activatedCodes,\n      account: account\n    });\n    activatedCodes.map(async code => {\n      const tokenToPlayer = await contract.methods\n        .hashedCodeToPlayer(code)\n        .call();\n      const owners = this.state.owners;\n      owners[code] = tokenToPlayer;\n      this.setState({ owners: owners });\n    });\n  }\n\n  render() {\n    let { activatedCodes, account, owners } = this.state;\n    if (!activatedCodes) {\n      activatedCodes = [];\n    }\n    return (\n      <div className=\"Visualize\">\n        <div\n          style={{\n            position: \"relative\",\n            margin: \"auto\",\n            width: \"2480px\",\n            height: \"1656px\"\n          }}\n        >\n          {activatedCodes.map(function(code) {\n            const { image, left, top, width, height } = IMAGE_CONFIG[code];\n\n            return (\n              <div\n                key={code}\n                className={owners[code] === account ? \"mine\" : \"\"}\n                style={{\n                  position: \"absolute\",\n                  left: left,\n                  top: top,\n                  width: width,\n                  height: height\n                }}\n              >\n                <img\n                  src={`./images/puzzle/${image}`}\n                  width={width}\n                  height={height}\n                  alt=\"\"\n                />\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Visualize;\n","import React from \"react\";\nimport About from \"./About\";\nimport Redeem from \"./Redeem\";\nimport NotFound from \"./NotFound\";\nimport Visualize from \"./Visualize\";\nimport { HashRouter as Router, Route, Link, Switch } from \"react-router-dom\";\n\nconst Index = () => <h2>Home</h2>;\n\nconst AppRouter = () => (\n  <Router>\n    <div>\n      <header>\n        <h1>Hunt Zuckerberg</h1>\n        <h2>35c3 treasure hunt game!</h2>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about/\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/visualize/\">Visualize</Link>\n            </li>\n          </ul>\n        </nav>\n      </header>\n\n      <main>\n        <Switch>\n          <Route path=\"/\" exact component={Index} />\n          <Route path=\"/redeem/:token\" component={Redeem} />\n          <Route path=\"/about/\" component={About} />\n          <Route path=\"/visualize/\" component={Visualize} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n    </div>\n  </Router>\n);\n\nexport default AppRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport AppRouter from \"./AppRouter\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<AppRouter />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}